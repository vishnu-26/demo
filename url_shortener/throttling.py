import time
from django.core.cache import cache as default_cache
from django.core.exceptions import ImproperlyConfigured
from rest_framework.throttling import BaseThrottle,SimpleRateThrottle

from user.authentication import is_authenticated

class CustomRateThrottling(SimpleRateThrottle):
    """
    Limits the rate of API calls by different amounts for various parts of
    the API.  Any view that has the `throttle_scope` property set will be
    throttled.  The unique cache key will be generated by concatenating the
    user id of the request, and the scope of the view being accessed.
    """
#    scope_attr = 'throttle_scope'

    def __init__(self):
        # Override the usual SimpleRateThrottle, because we can't determine
        # the rate until called by the view.
        pass

    def allow_request(self, request, view):
        # We can only determine the scope once we're called by the view.
        self.scope = self.get_scope(request)

        # If a view does not have a `throttle_scope` always allow the request
        if not self.scope:
            return True

        # Determine the allowed request rate as we normally would during
        # the `__init__` call.
        self.rate = self.get_rate()
        self.num_requests, self.duration = self.parse_rate(self.rate)

        # We can now proceed as normal.
        return super().allow_request(request, view)


    def get_scope(self,request):
        user = is_authenticated(request)
        if user:
            return 'user'
        else:
            return 'anon'


    def get_cache_key(self, request, view):
        """
        If `view.throttle_scope` is not set, don't apply this throttle.
        Otherwise generate the unique cache key by concatenating the user id
        with the '.throttle_scope` property of the view.
        """
        user = is_authenticated(request)
        if user:
            ident = user.get("user_id")
        else:
            ident = self.get_ident(request)
#            self.scope = 'anon'
            

        return self.cache_format % {
            'scope': self.scope,
            'ident': ident
        }




#class UserRateThrottle(SimpleRateThrottle):
#    """
#    Limits the rate of API calls that may be made by a given user.
#    The user id will be used as a unique cache key if the user is
#    authenticated.  For anonymous requests, the IP address of the request will
#    be used.
#    """
#    scope = 'user'
#
#    def get_cache_key(self, request, view):
#
#        user = is_authenticated(request)
#        if user:
#            ident = user.get("user_id")
#        else:
#            ident = self.get_ident(request)
#            self.scope = 'anon'
#            
#
#        return self.cache_format % {
#            'scope': self.scope,
#            'ident': ident
#        }
